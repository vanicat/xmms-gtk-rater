#+TITLE: Xmms Gtk Rater
#+AUTHOR: Rémi Vanicat <vanicat@debian.org>

Copyright: (c) 2010 Rémi Vanicat

* About
  This is a small gtk client for xmms2 that will allow you to easily
  rate your song as you are playing them.

  Read the [[file:README.org][README.org]] for more information
** Licence
   :PROPERTIES:
   :ID:       400dffa3-3529-4583-b776-af98d7d5610e
   :END:

#+source: copyright
#+begin_src ruby
  Copyright (c) 2010 Rémi Vanicat

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  SOFTWARE IN THE PUBLIC INTEREST, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Except as contained in this notice, the name of Rémi Vanicat shall not be
  used in advertising or otherwise to promote the sale, use or other dealings
  in this Software without prior written authorization from Rémi Vanicat.
#+end_src

* The structure of the program
  :PROPERTIES:
  :ID:       febdc89b-bfbc-4782-bf53-8b19ff298cf4
  :END:
#+begin_src ruby :tangle xmms-gtk-rater :noweb yes
  # <<copyright>>

  # This code is wrote using org-mode's babel's litterate programing
  # you should modify xmms-gtk-rater.org, and not xmms-gtk-rater directly.

  <<libraries>>

  <<xmms-extension>>

  <<server-interaction>>

  <<songs-lists>>

  <<user-interaction>>

  <<runing-it>>
#+end_src

** then included libraries
   :PROPERTIES:
   :ID:       303f4137-59ce-4c9f-810d-00f24548bafa
   :END:

#+source: libraries
#+begin_src ruby
  require 'xmmsclient'
  require 'xmmsclient_glib'
  require 'glib2'
  require 'gtk2'
#+end_src

* Some useful function
  :PROPERTIES:
  :ID:       fcfd7d96-0af2-4d22-8484-150e53c6bd0d
  :END:

#+source: xmms-extension
#+begin_src ruby
  module Xmms
    class Collection
      # :call-seq:
      #  Collection.equal(field,value,from=Collection.universe) -> collection
      #
      # Returns a new collection for song whose field is value in from
      def equal(field, value)
        coll = Xmms::Collection.new(TYPE_EQUALS)
        coll.attributes["field"]=field
        coll.attributes["value"]=value
        coll.operands<< self
        return coll
      end
    end
  end

  def debug(*arg)
    puts(*arg)
  end
#+end_src

* The interaction with the xmms server
** The structure of the class
   :PROPERTIES:
   :ID:       60333ece-ab83-4b09-b474-e04e9ea0606c
   :END:
#+source: server-interaction
#+begin_src ruby :noweb yes
  class XmmsInteract
    <<reading-xmms-hash>>

    <<initialization>>

    <<connection-handling>>

    <<watching-server-changes>>

    <<reading-server-information>>

    <<changing-the-library>>
  end
#+end_src

#+source: reading-xmms-hash
#+begin_src ruby
  def get(info, attr, default=nil)
    info[attr].map[0][1]
  rescue NoMethodError => e
    default

  end
#+end_src

** initializing
   :PROPERTIES:
   :ID:       83142473-12ba-40ab-b4d8-9a9169b4db1f
   :END:
#+source: initialization
#+begin_src ruby
  def initialize
    @looking_for_medialib_list = []
    @current_song_watcher = []
    @views = []
    unless connect!
      puts 'Failed to connect to XMMS2 daemon.'
      puts 'Please make sure xmms2d is running and using the correct IPC path.'
      exit
    end
  end
#+end_src

** connection hangling
   :PROPERTIES:
   :ID:       acdc6116-8573-46f2-be35-c706c3d5f5b7
   :END:
   we connect, and reconnect.
#+source: connection-handling
#+begin_src ruby
  def connect!
    begin
      @xc = Xmms::Client.new('GtkRater').connect(ENV['XMMS_PATH'])
    rescue Xmms::Client::ClientError
      return false
    end

    @xc.add_to_glib_mainloop

    looking_for_entry_change

    looking_at_current_song

    @xc.on_disconnect do
      @views.each do |view|
        view.on_server_disconnect!
      end

      unless reconnect!
        GLib::Timeout.add_seconds(10) do
          not reconnect!
        end
      end
    end

    return true
  end

  def reconnect!
    res = connect!
    if res
      @views.each do |view|
        view.on_server_reconnect!
      end
    end
    res
  end

  def register_connection_watcher(view)
    @views << view
  end

  def unregister_connection_watcher(view)
    @views.delete(view)
  end

#+end_src

** We need to know follow the server as some things update
   :PROPERTIES:
   :ID:       dd714d3f-82c4-4b7f-8a95-192083b8d9fc
   :END:
#+source: watching-server-changes
#+begin_src ruby
  def looking_for_entry_change
    @xc.broadcast_medialib_entry_changed.notifier do |id|
      song_info(id) do |id, title, artist, album, rating|
        @looking_for_medialib_list.each do |list|
          list.song_changed(id, title, artist, album, rating)
        end
        true
      end
      true
    end
  end

  def add_medialib_watcher(watcher)
    @looking_for_medialib_list << watcher
  end

  def remove_medialib_watcher(watcher)
    @looking_for_medialib_list.delete(watcher)
  end

  def looking_at_current_song
    @xc.broadcast_playback_current_id.notifier do |id|
      song_info(id) do |id, title, artist, album, rating|
        @current_song_watcher.each do |watcher|
          watcher.current_song_info(id, title, artist, album, rating)
        end
        true
      end
      true
    end
  end

  def add_current_song_watcher(watcher)
    current_id do |id|
      song_info(id) do |id, title, artist, album, rating|
        watcher.current_song_info(id, title, artist, album, rating)
      end
      false
    end
    @current_song_watcher << watcher
  end

  def remove_current_song_watcher(watcher)
    @current_song_watcher.delete(watcher)
  end
#+end_src

** We also have to look for current server status
   :PROPERTIES:
   :ID:       24ef7e44-c9d7-4014-a5a9-dae29e07ea7f
   :END:

#+source: reading-server-information
#+begin_src ruby
  def current_id(&body)
    @xc.playback_current_id.notifier do |id|
      yield(id)
    end
  end

  def song_info(id, &body)
    if id != 0
      @xc.medialib_get_info(id).notifier do |info|
        yield(id, get(info, :title), get(info, :artist), get(info, :album), get(info, :rating, "0").to_i)
        false
      end
    end
  end

  def coll_each_song(coll, &body)
    @xc.coll_query_ids(coll).notifier do |res|
      if res
        res.each do |id|
          song_info(id, &body)
        end
      end
      true
    end
  end
#+end_src

** To be worth something, we know change things on the server
   :PROPERTIES:
   :ID:       58a0ff3e-3da5-405d-afa1-8ad2e33165cb
   :END:
#+source: changing-the-library
#+begin_src ruby
  def erase_rating(id)
    @xc.medialib_entry_property_remove(id, :rating, "client/generic").notifier do
      false
    end
  end

  def rate(id,rate)
    if rate == 0
      erase_rating(id)
    else
      @xc.medialib_entry_property_set(id, :rating, rate, "client/generic").notifier do
        false
      end
    end
  end
#+end_src


* The songs lists
  :PROPERTIES:
  :ID:       c4114fc3-2599-40c6-84cf-ecd2721700a0
  :END:
#+source: songs-lists
#+begin_src ruby
  class SongList
    attr_reader :list
    attr_reader :xi

    COL_ID = 0
    COL_TITLE = 1
    COL_ARTIST = 2
    COL_ALBUM = 3
    COL_RATING = 4

    def destroy!
      @runing = false
      @list = nil
      @xi.remove_medialib_watcher(self)
    end

    def register(view)
      @xi.register_connection_watcher(view)
    end

    def unregister(view)
      @xi.unregister_connection_watcher(view)
    end

    def initialize(xi)
      @xi = xi

      @list = Gtk::ListStore.new(Integer,String, String, String, Integer, TrueClass, TrueClass, TrueClass, TrueClass, TrueClass)

      @runing = true

      @xi.add_medialib_watcher(self)
    end

    def set_song_infos(iter, id, title, artist, album, rating)
      iter[COL_ID]=id
      iter[COL_TITLE]=title || "UNKNOW"
      iter[COL_ARTIST]=artist || "UNKNOW"
      iter[COL_ALBUM]=album || "UNKNOW"
      update_rating(iter, rating)
    end

    def song_changed(id, title, artist, album, rating)
      @list.each do |model,path,iter|
        set_song_infos(iter, id, title, artist, album, rating) if iter[0] == id
      end
    end

    def add_song_info(id, title, artist, album, rating)
      iter = @list.prepend
      set_song_infos(iter, id, title, artist, album, rating)
    end

    def update_rating(iter,rate)
      iter[COL_RATING]=rate
      for i in 1..5
        iter[COL_RATING+i] = rate >= i
      end
    end

    def rate(path,rate)
      if path.is_a? Gtk::TreeIter
        iter=path
      else
        iter=@list.get_iter(path)
      end
      if iter
        @xi.rate(iter[COL_ID],rate)
        update_rating(iter, rate)
      else
        @xi.current_id do |id|
          @xi.rate(id, rate)
          false
        end
      end
    end
  end

  class SongListPlayed < SongList
    MAX_SONG = 50

    def remove_last_song()
      cur = @list.get_iter(@last_reference.path)
      previous = @last_reference.path
      previous.prev!
      @list.remove(cur)
      @last_reference = Gtk::TreeRowReference.new(@list, previous)
      @num_song -= 1
      remove_last_song() if @num_song > MAX_SONG
    end

    def add_song_info(id, title, artist, album, rating)
      super(id, title, artist, album, rating)
      @num_song += 1
      @last_reference ||= Gtk::TreeRowReference.new(@list, @list.iter_first.path)
    end


    def current_song_info(id, title, artist, album, rating)
      add_song_info(id, title, artist, album, rating)
      remove_last_song() if @num_song > MAX_SONG
    end

    def initialize(xc)
      super(xc)

      @num_song = 0
      @last_reference = nil

      @xi.add_current_song_watcher(self)
    end

  end

  class SongListCollection < SongList

    def initialize(xc,coll)
      super(xc)

      @list.set_sort_column_id(COL_ID)

      @list.set_default_sort_func do |iter1, iter2|
        iter1[COL_ID] <=> iter2[COL_ID]
      end

      @list.set_sort_func(COL_ALBUM) do |iter1, iter2|
        [iter1[COL_ALBUM], iter1[COL_TITLE], iter1[COL_ID]] <=> [iter2[COL_ALBUM], iter2[COL_TITLE], iter2[COL_ID]]
      end

      @list.set_sort_func(COL_TITLE) do |iter1, iter2|
        [iter1[COL_TITLE], iter1[COL_ARTIST], iter1[COL_ALBUM], iter1[COL_ID]] <=> [iter2[COL_TITLE], iter2[COL_ARTIST], iter2[COL_ALBUM], iter2[COL_ID]]
      end

      @list.set_sort_func(COL_ARTIST) do |iter1, iter2|
        [iter1[COL_ARTIST], iter1[COL_ALBUM], iter1[COL_TITLE], iter1[COL_ID]] <=> [iter2[COL_ARTIST], iter2[COL_ALBUM], iter2[COL_TITLE], iter2[COL_ID]]
      end


      @xi.coll_each_song(coll) do |id, title, artist, album, rating|
        add_song_info(id, title, artist, album, rating)
      end
    end

    def self.equal(xc, field, value)
      coll = Xmms::Collection.universe.equal(field, value)

      return SongListCollection.new(xc, coll)
    end

    def self.parse(xc, pattern)
      coll = Xmms::Collection.parse(pattern)

      return SongListCollection.new(xc, coll)
    end
  end
#+end_src

#+source: user-interaction
#+begin_src ruby
class UserInteract

  def main?
    @main
  end

  def on_server_reconnect!
    @window.sensitive=true
  end

  def on_server_disconnect!
    @window.sensitive=false
  end

  def initialize(slist, title, main=false)
    @slist = slist
    @window = Gtk::Window.new()
    @window.title = title
    @main = main

    @slist.register(self)

    view = initialize_tree()

    pack = Gtk::VBox.new()
    menubar = Gtk::MenuBar.new

    ag = Gtk::AccelGroup.new

    file = Gtk::MenuItem.new("_File")
    file.submenu=Gtk::Menu.new
    file.submenu.accel_group=ag

    action = Gtk::MenuItem.new("_Action")
    action.submenu = action_menu
    action.submenu.accel_group=ag

    if not main?
      close = Gtk::ImageMenuItem.new(Gtk::Stock::CLOSE,ag)
      close.signal_connect('activate') do
        @window.destroy
        false
      end
      file.submenu.append(close)
    end

    quit = Gtk::ImageMenuItem.new(Gtk::Stock::QUIT,ag)

    quit.signal_connect('activate') do
      Gtk.main_quit
      false
    end

    file.submenu.append(quit)

    menubar.append(file)
    menubar.append(action)

    @window.add(pack)
    pack.pack_start(menubar,false,false,1)
    pack.pack_start(view,true,true,1)

    @window.signal_connect('delete_event') do
      false
    end

    @window.signal_connect('destroy') do
      @slist.unregister(self)
      @slist.destroy!
      false
    end

    if main?
      @window.signal_connect('destroy') do
        Gtk.main_quit
      end
    end

    @window.add_accel_group(ag)
    @window.show_all
  end

  def initialize_std_col(title, colnum)
    renderer = Gtk::CellRendererText.new
    renderer.ellipsize = Pango::ELLIPSIZE_END
    col = Gtk::TreeViewColumn.new(title,renderer, :text => colnum)
    col.expand = true
    col.resizable = true
    col.sizing = Gtk::TreeViewColumn::FIXED
    col.fixed_width = 120
    col.sort_column_id = colnum unless main?
    @view.append_column(col)
  end

  def current_iters
    selection = @view.selection
    if selection.selected_rows.length > 0
      return selection.selected_rows
    elsif @current_path
      return [@slist.list.get_iter(@current_path)]
    else
      return [@slist.list.iter_first]
    end
  end

  def current_iter
    path = current_iters[0]     # Using alway the first ???
    if path.is_a? Gtk::TreeIter
      iter=path
    else
      iter=@slist.list.get_iter(path)
    end
    return iter
  end

  def rating_menu(i)
    item = Gtk::MenuItem.new("Rate to _#{i}")
    item.signal_connect("activate") {
      current_iters.each do |iter|
        @slist.rate(iter,i)
      end
    }
    return item
  end

  def action_menu
    unless @action_menu
      menu = Gtk::Menu.new
      item = Gtk::MenuItem.new("Show same _artist")
      item.signal_connect("activate") {
        user_same(@slist.xi, "artist", current_iter[SongList::COL_ARTIST])
      }
      menu.append(item)

      item = Gtk::MenuItem.new("Show same al_bum")
      item.signal_connect("activate") {
        user_same(@slist.xi, "album", current_iter[SongList::COL_ALBUM])
      }
      menu.append(item)

      item = Gtk::MenuItem.new("Show same _title")
      item.signal_connect("activate") {
        user_same(@slist.xi, "title", current_iter[SongList::COL_TITLE])
      }
      menu.append(item)

      item = Gtk::MenuItem.new("Rate _others")
      item.signal_connect("activate") {
        user_parse(@slist.xi)
      }
      menu.append(item)


      item = Gtk::MenuItem.new("_Erase rating")
      item.signal_connect("activate") {
        current_iters.each do |iter|
          @slist.rate(iter,0)
        end
      }
      menu.append(item)

      for i in 1..5
        item=rating_menu(i)
        menu.append(item)
      end

      menu.show_all
      @action_menu = menu
    end
    return @action_menu
  end

  def initialize_tree
    @view = Gtk::TreeView.new(@slist.list)
    @view.selection.mode=Gtk::SELECTION_MULTIPLE

    scroll = Gtk::ScrolledWindow.new()
    scroll.add(@view)
    scroll.set_policy(Gtk::POLICY_NEVER, Gtk::POLICY_AUTOMATIC)

    initialize_std_col("Title", SongList::COL_TITLE)

    initialize_std_col("Artist", SongList::COL_ARTIST)

    initialize_std_col("Album", SongList::COL_ALBUM)

    col = Gtk::TreeViewColumn.new("rating")
    for i in 1..5
      initialize_rater_toggle(col,i)
    end
    col.expand=false
    @view.append_column(col)

    @view.search_column=SongList::COL_TITLE

    @view.signal_connect("button_press_event") do |widget, event|
      if event.kind_of? Gdk::EventButton and event.button == 3
        path = @view.get_path(event.x, event.y)
        @current_path = path[0] if path
        action_menu.popup(nil, nil, event.button, event.time)
      end
    end

    @view.signal_connect("popup_menu") {
      @current_path = nil
      action_menu.popup(nil, nil, 0, Gdk::Event::CURRENT_TIME)
    }

    @slist.list.signal_connect('row-inserted') do |model, path, iter|
      pos = scroll.vscrollbar.adjustment.value
      if pos == 0
        handler = scroll.vscrollbar.adjustment.signal_connect('changed') do
          scroll.vscrollbar.adjustment.signal_handler_disconnect(handler)
          GLib::Idle.add do
            scroll.vscrollbar.adjustment.value = 0
            false
          end
        end
      end
      true
    end

    return scroll
  end

  def initialize_rater_toggle(col,i)
    renderer = Gtk::CellRendererToggle.new
    renderer.activatable = true
    renderer.signal_connect('toggled') do |w,path|
      iter = @slist.list.get_iter(path)
      if iter[SongList::COL_RATING] == i
        @slist.rate(iter, i-1)
      else
        @slist.rate(path,i)
      end
    end
    col.pack_start(renderer,false)
    col.add_attribute(renderer, :active, i+SongList::COL_RATING)
  end
end
#+end_src

#+source: runing-it
#+begin_src ruby
  def user_same(xi,field,value)
    UserInteract.new(SongListCollection.equal(xi,field,value),
                     "#{field}: #{value}")
  end

  def user_parse(xi)
    dialog=Gtk::Dialog.new("Rate from search",
                           nil,
                           Gtk::Dialog::DESTROY_WITH_PARENT,
                           [Gtk::Stock::OK, Gtk::Dialog::RESPONSE_ACCEPT],
                           [Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_REJECT])
    dialog.vbox.add(Gtk::Label.new("collection pattern:"))
    entry=Gtk::Entry.new()
    dialog.vbox.add(entry)

    entry.signal_connect('activate') do |v|
      dialog.response(Gtk::Dialog::RESPONSE_ACCEPT)
    end

    dialog.show_all
    dialog.run do |response|
      if response == Gtk::Dialog::RESPONSE_ACCEPT
        begin
          UserInteract.new(SongListCollection.parse(xi,entry.text),entry.text)
        rescue Exception => e
          message = Gtk::MessageDialog.new(nil,
                                           Gtk::Dialog::DESTROY_WITH_PARENT,
                                           Gtk::MessageDialog::WARNING,
                                           Gtk::MessageDialog::BUTTONS_CLOSE,
                                           "Invalid pattern '%s'" % entry.text)
          message.run
          message.destroy
        end
      end
      dialog.destroy
    end
  end

  user = UserInteract.new(SongListPlayed.new(XmmsInteract.new),"Xmms Rater", true)

  Gtk.main
#+end_src
