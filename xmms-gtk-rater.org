#+TITLE: Xmms Gtk Rater
#+AUTHOR: Rémi Vanicat <vanicat@debian.org>

Copyright: (c) 2010 Rémi Vanicat

* About
  This is a small gtk client for xmms2 that will allow you to easily
  rate your song as you are playing them.

  Read the [[file:README.org][README.org]] for more information
** Licence
   :PROPERTIES:
   :ID:       400dffa3-3529-4583-b776-af98d7d5610e
   :END:

#+source: copyright
#+begin_src ruby
  Copyright (c) 2010 Rémi Vanicat

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  SOFTWARE IN THE PUBLIC INTEREST, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Except as contained in this notice, the name of Rémi Vanicat shall not be
  used in advertising or otherwise to promote the sale, use or other dealings
  in this Software without prior written authorization from Rémi Vanicat.
#+end_src

* The structure of the program
  :PROPERTIES:
  :ID:       febdc89b-bfbc-4782-bf53-8b19ff298cf4
  :END:
#+begin_src ruby :tangle xmms-gtk-rater :noweb yes
  # <<copyright>>

  # This code is wrote using org-mode's babel's litterate programing
  # you should modify xmms-gtk-rater.org, and not xmms-gtk-rater directly.

  <<libraries>>

  <<xmms-extension>>

  <<server-interaction>>

  <<songs-lists>>

  <<user-interaction>>

  <<runing-it>>
#+end_src

** then included libraries
   :PROPERTIES:
   :ID:       303f4137-59ce-4c9f-810d-00f24548bafa
   :END:

#+source: libraries
#+begin_src ruby
  require 'xmmsclient'
  require 'xmmsclient_glib'
  require 'glib2'
  require 'gtk2'
#+end_src

* Some useful function
  :PROPERTIES:
  :ID:       fcfd7d96-0af2-4d22-8484-150e53c6bd0d
  :END:

#+source: xmms-extension
#+begin_src ruby
  module Xmms
    class Collection
      # :call-seq:
      #  Collection.equal(field,value,from=Collection.universe) -> collection
      #
      # Returns a new collection for song whose field is value in from
      def equal(field, value)
        coll = Xmms::Collection.new(TYPE_EQUALS)
        coll.attributes["field"]=field
        coll.attributes["value"]=value
        coll.operands<< self
        return coll
      end
    end
  end

  def debug(*arg)
    puts(*arg)
  end
#+end_src

* The interaction with the xmms server
** The structure of the class
   :PROPERTIES:
   :ID:       60333ece-ab83-4b09-b474-e04e9ea0606c
   :END:
#+source: server-interaction
#+begin_src ruby :noweb yes
  class XmmsInteract
    <<reading-xmms-hash>>

    <<initialization>>

    <<connection-handling>>

    <<watching-server-changes>>

    <<reading-server-information>>

    <<changing-the-library>>

    <<playlist-handling>>
  end
#+end_src

#+source: reading-xmms-hash
#+begin_src ruby
  def get(info, attr, default=nil)
    info[attr].map[0][1]
  rescue NoMethodError => e
    default

  end
#+end_src

** initializing
   :PROPERTIES:
   :ID:       83142473-12ba-40ab-b4d8-9a9169b4db1f
   :END:
#+source: initialization
#+begin_src ruby
  def initialize
    @looking_for_medialib_list = []
    @current_song_watcher = []
    @views = []
    unless connect!
      puts 'Failed to connect to XMMS2 daemon.'
      puts 'Please make sure xmms2d is running and using the correct IPC path.'
      exit
    end
  end
#+end_src

** connection hangling
   :PROPERTIES:
   :ID:       acdc6116-8573-46f2-be35-c706c3d5f5b7
   :END:
   we connect, and reconnect.
#+source: connection-handling
#+begin_src ruby
  def connect!
    begin
      @xc = Xmms::Client.new('GtkRater').connect(ENV['XMMS_PATH'])
    rescue Xmms::Client::ClientError
      return false
    end

    @xc.add_to_glib_mainloop

    looking_for_entry_change

    looking_at_current_song

    initialize_playlist

    @xc.on_disconnect do
      @views.each do |view|
        view.on_server_disconnect!
      end

      unless reconnect!
        GLib::Timeout.add_seconds(10) do
          not reconnect!
        end
      end
    end

    return true
  end

  def reconnect!
    res = connect!
    if res
      @views.each do |view|
        view.on_server_reconnect!
      end
    end
    res
  end

  def register_connection_watcher(view)
    @views << view
  end

  def unregister_connection_watcher(view)
    @views.delete(view)
  end
#+end_src

** We need to know follow the server as some things update
   :PROPERTIES:
   :ID:       dd714d3f-82c4-4b7f-8a95-192083b8d9fc
   :END:
#+source: watching-server-changes
#+begin_src ruby
  def looking_for_entry_change
    @xc.broadcast_medialib_entry_changed.notifier do |id|
      song_info(id) do |id, title, artist, album, rating|
        @looking_for_medialib_list.each do |list|
          list.song_changed(id, title, artist, album, rating)
        end
        true
      end
      true
    end
  end

  def add_medialib_watcher(watcher)
    @looking_for_medialib_list << watcher
  end

  def remove_medialib_watcher(watcher)
    @looking_for_medialib_list.delete(watcher)
  end

  def looking_at_current_song
    @xc.broadcast_playback_current_id.notifier do |id|
      song_info(id) do |id, title, artist, album, rating|
        @current_song_watcher.each do |watcher|
          watcher.current_song_info(id, title, artist, album, rating)
        end
        true
      end
      true
    end
  end

  def add_current_song_watcher(watcher)
    current_id do |id|
      song_info(id) do |id, title, artist, album, rating|
        watcher.current_song_info(id, title, artist, album, rating)
      end
      false
    end
    @current_song_watcher << watcher
  end

  def remove_current_song_watcher(watcher)
    @current_song_watcher.delete(watcher)
  end
#+end_src

** We also have to look for current server status
   :PROPERTIES:
   :ID:       24ef7e44-c9d7-4014-a5a9-dae29e07ea7f
   :END:

#+source: reading-server-information
#+begin_src ruby
  def current_id(&body)
    @xc.playback_current_id.notifier do |id|
      yield(id)
    end
  end

  def song_info(id, &body)
    if id != 0
      @xc.medialib_get_info(id).notifier do |info|
        yield(id, get(info, :title), get(info, :artist), get(info, :album), get(info, :rating, "0").to_i)
        false
      end
    end
  end

  def coll_each_song(coll, &body)
    @xc.coll_query_ids(coll).notifier do |res|
      if res
        res.each do |id|
          song_info(id, &body)
        end
      end
      true
    end
  end

  def coll_query_info(coll,&body)
    @xc.coll_query_info(coll,['id', 'title', 'artist', 'album', 'rating']).notifier do |infos|
      body.call(infos)
      true
    end

  end
#+end_src
** Playlist handling
   :PROPERTIES:
   :ID:       7e5da35c-6173-4570-b9ac-8c4519ad032a
   :END:
#+source: playlist-handling
#+begin_src ruby
  PLAYLIST_REMOVE = 3
  PLAYLIST_CREATE = 0

  def initialize_playlist
    @playlist_list = nil
    @xc.playlist_list.notifier do |res|
      @playlist_list  = res.sort!
      true
    end

    @xc.broadcast_coll_changed.notifier do |res|
      if res[:namespace] == "Playlists"
        if res[:type] == PLAYLIST_REMOVE
          @playlist_list.delete(res[:name])
        elsif res[:type] == PLAYLIST_CREATE
          @playlist_list << res[:name]
          @playlist_list.sort!
        end
      end
      true
    end
  end

  def playlist_list
    @playlist_list
  end

  def add_to_playlist(id, pl)
    Xmms::Playlist.new(@xc, pl).add_entry(id)
  end
#+end_src
** To be worth something, we know change things on the server
   :PROPERTIES:
   :ID:       58a0ff3e-3da5-405d-afa1-8ad2e33165cb
   :END:
#+source: changing-the-library
#+begin_src ruby
  def erase_rating(id)
    @xc.medialib_entry_property_remove(id, :rating, "client/generic").notifier do
      false
    end
  end

  def rate(id,rate)
    if rate == 0
      erase_rating(id)
    else
      @xc.medialib_entry_property_set(id, :rating, rate, "client/generic").notifier do
        false
      end
    end
  end
#+end_src
* The songs lists
  :PROPERTIES:
  :ID:       c4114fc3-2599-40c6-84cf-ecd2721700a0
  :END:
#+source: songs-lists
#+begin_src ruby
  <<mother-song>>

  <<list-for-played-song>>

  <<list-for-collection>>

  <<list-for-duplicate>>
#+end_src

** First, the common functionality for songs list
   :PROPERTIES:
   :ID:       5b0220e9-bb81-48d8-8a06-069dfffa82c8
   :END:
#+source: mother-song
#+begin_src ruby :noweb yes
  class SongList
    attr_reader :list
    attr_reader :xi

    <<song-list-column>>

    <<life-and-death>>

    <<update-songs>>

    def register(view)
      @xi.register_connection_watcher(view)
    end

    def unregister(view)
      @xi.unregister_connection_watcher(view)
    end

    <<medialist-acting>>
  end
#+end_src
*** There is some constant
    :PROPERTIES:
    :ID:       fd83eb5b-63ab-4973-bd16-643c31fae9cb
    :END:
#+source: song-list-column
#+begin_src ruby
  COL_ID = 0
  COL_TITLE = 1
  COL_ARTIST = 2
  COL_ALBUM = 3
  COL_RATING = 4
#+end_src
*** birth and death of the list
    :PROPERTIES:
    :ID:       82627508-ee32-4975-86c9-6001aab246e0
    :END:
#+source: life-and-death
#+begin_src ruby
  def initialize(xi)
    @xi = xi

    @list = Gtk::ListStore.new(Integer,String, String, String, Integer, TrueClass, TrueClass, TrueClass, TrueClass, TrueClass)

    @runing = true

    @xi.add_medialib_watcher(self)
  end

  def destroy!
    @runing = false
    @list = nil
    @xi.remove_medialib_watcher(self)
  end
#+end_src
*** Getting and updating songs info
    :PROPERTIES:
    :ID:       dea10c92-9002-46d5-874c-e24486a4c716
    :END:
#+source: update-songs
#+begin_src ruby
  def set_song_infos(iter, id, title, artist, album, rating)
    iter.set_value(COL_ID,id)
    iter.set_value(COL_TITLE,title || "UNKNOW")
    iter[COL_ARTIST]=artist || "UNKNOW"
    iter[COL_ALBUM]=album || "UNKNOW"
    update_rating(iter, rating)
  end

  def update_rating(iter,rate)
    iter[COL_RATING]=rate
    for i in 1..5
      iter[COL_RATING+i] = rate >= i
    end
  end

  def song_changed(id, title, artist, album, rating)
    @list.each do |model,path,iter|
      set_song_infos(iter, id, title, artist, album, rating) if iter[0] == id
    end
  end

  def add_song_info(id, title, artist, album, rating)
    iter = @list.prepend
    set_song_infos(iter, id, title, artist, album, rating)
  end

  def append_song_info(id, title, artist, album, rating)
    iter = @list.append
    set_song_infos(iter, id, title, artist, album, rating)
  end
#+end_src
*** Acting on the medialist
    :PROPERTIES:
    :ID:       cd2f74c4-9dac-463a-87f5-ced87c26625a
    :END:
#+source: medialist-acting
#+begin_src ruby :noweb yes
    def with_id(path,&body)
      if path.is_a? Gtk::TreeIter
        iter=path
      else
        iter=@list.get_iter(path)
      end
      if iter
        body.call(iter[COL_ID])
      else
        @xi.current_id do |id|
          body.call(id)
          false
        end
      end
    end

    <<changing-rating>>

    <<adding-toplaylist>>
#+end_src
**** Changing the rating
    :PROPERTIES:
    :ID:       1a3f6eee-4fb5-4305-bfa4-28d44e6cd65b
    :END:
#+source: changing-rating
#+begin_src ruby
  def rate(path,rate)
    with_id(path) do |id|
      @xi.rate(id, rate)
    end
  end
#+end_src
**** Adding to playlist
     :PROPERTIES:
     :ID:       e43e069d-4237-4b57-8ba8-6b89b92b194f
     :END:
#+source: adding-toplaylist
#+begin_src ruby
  def add_to_playlist(path, pl)
    with_id(path) do |id|
      @xi.add_to_playlist(id, pl)
    end
  end
#+end_src
** The list for played songs
   :PROPERTIES:
   :ID:       5a398c91-2d6a-4a5d-bbfc-4fca5fbaf3fa
   :END:
#+source: list-for-played-song
#+begin_src ruby
  class SongListPlayed < SongList
    MAX_SONG = 50

    def remove_last_song()
      cur = @list.get_iter(@last_reference.path)
      previous = @last_reference.path
      previous.prev!
      @list.remove(cur)
      @last_reference = Gtk::TreeRowReference.new(@list, previous)
      @num_song -= 1
      remove_last_song() if @num_song > MAX_SONG
    end

    def add_song_info(id, title, artist, album, rating)
      super(id, title, artist, album, rating)
      @num_song += 1
      @last_reference ||= Gtk::TreeRowReference.new(@list, @list.iter_first.path)
    end


    def current_song_info(id, title, artist, album, rating)
      add_song_info(id, title, artist, album, rating)
      remove_last_song() if @num_song > MAX_SONG
    end

    def initialize(xc)
      super(xc)

      @num_song = 0
      @last_reference = nil

      @xi.add_current_song_watcher(self)
    end

  end
#+end_src
** The list for songs from a collection
   :PROPERTIES:
   :ID:       1a9c3e24-0131-49f2-8df0-69d4a875b553
   :END:
#+source: list-for-collection
#+begin_src ruby
  class SongListCollection < SongList

    SORT_DEFAULT = [ COL_ID ]
    SORT_ARTIST = [ COL_ARTIST, COL_ALBUM, COL_TITLE, COL_ID ]
    SORT_ALBUM = [ COL_ALBUM, COL_TITLE, COL_ID ]
    SORT_TITLE = [ COL_TITLE, COL_ARTIST, COL_ALBUM, COL_ID ]

    def cmp_iter(iter1,iter2,cols)
      c = cols.collect do |col|
        if iter1[col] and iter2[col]
          iter1[col] <=> iter2[col]
        elsif iter1[col]
          -1
        elsif iter2[col]
          1
        elsif
          0
        end
      end

      c.reject { |i| i==0 }

      c[0] || 0
    end

    def initialize(xc,coll)
      super(xc)

      @coll = coll

      @list.set_sort_column_id(COL_ID)

      @list.set_default_sort_func do |iter1, iter2|
        cmp_iter(iter1,iter2,SORT_DEFAULT)
      end

      @list.set_sort_func(COL_ALBUM) do |iter1, iter2|
        cmp_iter(iter1,iter2,SORT_ALBUM)
      end

      @list.set_sort_func(COL_TITLE) do |iter1, iter2|
        cmp_iter(iter1,iter2,SORT_TITLE)
      end

      @list.set_sort_func(COL_ARTIST) do |iter1, iter2|
        cmp_iter(iter1,iter2,SORT_ARTIST)
      end
      load!
    end

    def reload!
      list.clear

      load!
    end

    def load!
      @xi.coll_each_song(@coll) do |id, title, artist, album, rating|
        append_song_info(id, title, artist, album, rating)
      end
    end

    def self.equal(xc, field, value)
      coll = Xmms::Collection.universe.equal(field, value)

      return self.new(xc, coll)
    end

    def self.parse(xc, pattern)
      coll = Xmms::Collection.parse(pattern)

      return self.new(xc, coll)
    end
  end
#+end_src
** The list for songs that could be duplicate
   :PROPERTIES:
   :ID:       1756d1c1-8754-499e-85c0-ed9dd8b31d3b
   :END:
   We look for duplicate inside a collection. It could be universe...
#+source: list-for-duplicate
#+begin_src ruby
  class SongListDuplicate < SongListCollection

    SORT_DEFAULT = [ COL_TITLE ]
    SORT_ARTIST = [ COL_ARTIST, COL_TITLE, COL_ALBUM, COL_ID ]
    SORT_ALBUM = [ COL_ALBUM, COL_TITLE, COL_ID ]
    SORT_TITLE = [ COL_TITLE, COL_ARTIST, COL_ALBUM, COL_ID ]

    def field_value_cmp(a, b)
      if a
        if b
          a <=> b
        else
          1
        end
      else
        -1
      end
    end


    def song_compare(a, b)
      titlea = a.has_key?(:title) && a[:title]
      titleb = b.has_key?(:title) && b[:title]
      artista = a.has_key?(:artist) && a[:artist]
      artistb = b.has_key?(:artist) && b[:artist]
      if artista != artistb then
        field_value_cmp(artista, artistb)
      elsif titlea != titleb
        field_value_cmp(titlea, titleb)
      else
        a[:id] <=> b[:id]
      end
    end

    def str_prefix (a, b)
      if a.length > b.length
        false
      elsif a == b
        true
      elsif
        s = b[0,a.length]
        s == a
      end
    end

    def title_prefix (a,b)
      a and a[:artist] and a[:title] and a[:artist] == b[:artist] and
        str_prefix(a[:title], b[:title])
    end

    def append_song_hash(info)
      append_song_info(info[:id], info[:title], info[:artist], info[:album], info[:rating]?info[:rating]:0)
    end

    def initialize(xc,coll)
      super(xc,coll)
    end

    def load!
      @xi.coll_query_info(@coll) do |songs|
        if songs
          songs.sort! { |a,b| song_compare(a, b) }

          curinfo = nil
          added = false

          songs.each do |info|
            if title_prefix(curinfo, info)
              unless added
                append_song_hash(curinfo)
                added = true
              end
              append_song_hash(info)
            else
              added = false
              curinfo = info
            end
          end
        end
      end
    end
  end
#+end_src
* Interacting with the user
  :PROPERTIES:
  :ID:       a344f483-0f1f-4fa9-8380-c0f01ffe11b9
  :END:
#+source: user-interaction
#+begin_src ruby
  class UserInteract

    def main?
      @main
    end

    def on_server_reconnect!
      @window.sensitive=true
    end

    def on_server_disconnect!
      @window.sensitive=false
    end

    def initialize(slist, title, main=false)
      @slist = slist
      @window = Gtk::Window.new()
      @window.title = title
      @window.icon=Gdk::Pixbuf.new("/usr/share/pixmaps/xmms2.svg")
      @main = main

      @slist.register(self)

      view = initialize_tree()

      pack = Gtk::VBox.new()
      menubar = Gtk::MenuBar.new

      ag = Gtk::AccelGroup.new

      file = Gtk::MenuItem.new("_File")
      file.submenu=Gtk::Menu.new
      file.submenu.accel_group=ag

      action = Gtk::MenuItem.new("_Action")
      action.submenu = action_menu
      action.submenu.accel_group=ag

      if not main?
        close = Gtk::ImageMenuItem.new(Gtk::Stock::CLOSE,ag)
        close.signal_connect('activate') do
          @window.destroy
          false
        end
        file.submenu.append(close)
      end

      quit = Gtk::ImageMenuItem.new(Gtk::Stock::QUIT,ag)

      quit.signal_connect('activate') do
        Gtk.main_quit
        false
      end

      file.submenu.append(quit)

      menubar.append(file)
      menubar.append(action)

      @window.add(pack)
      pack.pack_start(menubar,false,false,1)
      pack.pack_start(view,true,true,1)

      @window.signal_connect('delete_event') do
        false
      end

      @window.signal_connect('destroy') do
        @slist.unregister(self)
        @slist.destroy!
        false
      end

      if main?
        @window.signal_connect('destroy') do
          Gtk.main_quit
        end
      end

      @window.add_accel_group(ag)
      @window.show_all
    end

    def initialize_std_col(title, colnum)
      renderer = Gtk::CellRendererText.new
      renderer.ellipsize = Pango::ELLIPSIZE_END
      col = Gtk::TreeViewColumn.new(title,renderer, :text => colnum)
      col.expand = true
      col.resizable = true
      col.sizing = Gtk::TreeViewColumn::FIXED
      col.fixed_width = 120
      col.sort_column_id = colnum unless main?
      @view.append_column(col)
    end

    def current_iters
      selection = @view.selection
      if selection.selected_rows.length > 0
        return selection.selected_rows
      elsif @current_path
        return [@slist.list.get_iter(@current_path)]
      else
        return [@slist.list.iter_first]
      end
    end

    def current_iter
      path = current_iters[0]     # Using alway the first ???
      if path.is_a? Gtk::TreeIter
        iter=path
      else
        iter=@slist.list.get_iter(path)
      end
      return iter
    end

    def rating_menu(i)
      item = Gtk::MenuItem.new("Rate to _#{i}")
      item.signal_connect("activate") {
        current_iters.each do |iter|
          @slist.rate(iter,i)
        end
      }
      return item
    end

    def action_menu
      unless @action_menu
        menu = Gtk::Menu.new

        unless main?
          item = Gtk::MenuItem.new("_Reload")
          item.signal_connect("activate") {
            @slist.reload!
          }
          menu.append(item)
        end


        item = Gtk::MenuItem.new("Show same _artist")
        item.signal_connect("activate") {
          user_same(@slist.xi, "artist", current_iter[SongList::COL_ARTIST])
        }
        menu.append(item)

        item = Gtk::MenuItem.new("Show same al_bum")
        item.signal_connect("activate") {
          user_same(@slist.xi, "album", current_iter[SongList::COL_ALBUM])
        }
        menu.append(item)

        item = Gtk::MenuItem.new("Show same _title")
        item.signal_connect("activate") {
          user_same(@slist.xi, "title", current_iter[SongList::COL_TITLE])
        }
        menu.append(item)

        item = Gtk::MenuItem.new("Rate _others")
        item.signal_connect("activate") {
          user_parse(@slist.xi)
        }
        menu.append(item)

        item = Gtk::MenuItem.new("Looking for _duplicate")
        item.signal_connect("activate") {
          duplicate_parse(@slist.xi)
        }
        menu.append(item)


        item = Gtk::MenuItem.new("_Erase rating")
        item.signal_connect("activate") {
          current_iters.each do |iter|
            @slist.rate(iter,0)
          end
        }
        menu.append(item)

        for i in 1..5
          item=rating_menu(i)
          menu.append(item)
        end

        item = Gtk::MenuItem.new("Add to _playlist")
        menu.signal_connect("show") do
          item.submenu = playlist_menu do |pl|
            current_iters.each do |iter|
              @slist.add_to_playlist(iter, pl)
            end
          end
        end
        menu.append(item)

        menu.show_all
        @action_menu = menu
      end
      return @action_menu
    end

    def playlist_menu(&body)
      playlists = @slist.xi.playlist_list
      if playlists
        menu = Gtk::Menu.new
        playlists.each do |playlist|
          unless playlist =~ /^_/
            item = Gtk::MenuItem.new(playlist, use_underline = false)
            item.signal_connect("activate") do
              body.call(playlist)
            end
            menu.append(item)
          end
        end
        menu.show_all
        menu
      else
        nil
      end
    end

    def initialize_tree
      @view = Gtk::TreeView.new(@slist.list)
      @view.selection.mode=Gtk::SELECTION_MULTIPLE

      scroll = Gtk::ScrolledWindow.new()
      scroll.add(@view)
      scroll.set_policy(Gtk::POLICY_NEVER, Gtk::POLICY_AUTOMATIC)

      initialize_std_col("Title", SongList::COL_TITLE)

      initialize_std_col("Artist", SongList::COL_ARTIST)

      initialize_std_col("Album", SongList::COL_ALBUM)

      col = Gtk::TreeViewColumn.new("rating")
      for i in 1..5
        initialize_rater_toggle(col,i)
      end
      col.expand=false
      @view.append_column(col)

      @view.search_column=SongList::COL_TITLE

      @view.signal_connect("button_press_event") do |widget, event|
        if event.kind_of? Gdk::EventButton and event.button == 3
          path = @view.get_path(event.x, event.y)
          @current_path = path[0] if path
          action_menu.popup(nil, nil, event.button, event.time)
        end
      end

      @view.signal_connect("popup_menu") {
        @current_path = nil
        action_menu.popup(nil, nil, 0, Gdk::Event::CURRENT_TIME)
      }

      @slist.list.signal_connect('row-inserted') do |model, path, iter|
        pos = scroll.vscrollbar.adjustment.value
        if pos == 0
          handler = scroll.vscrollbar.adjustment.signal_connect('changed') do
            scroll.vscrollbar.adjustment.signal_handler_disconnect(handler)
            GLib::Idle.add do
              scroll.vscrollbar.adjustment.value = 0
              false
            end
          end
        end
        true
      end

      return scroll
    end

    def initialize_rater_toggle(col,i)
      renderer = Gtk::CellRendererToggle.new
      renderer.activatable = true
      renderer.signal_connect('toggled') do |w,path|
        iter = @slist.list.get_iter(path)
        if iter[SongList::COL_RATING] == i
          @slist.rate(iter, i-1)
        else
          @slist.rate(path,i)
        end
      end
      col.pack_start(renderer,false)
      col.add_attribute(renderer, :active, i+SongList::COL_RATING)
    end
  end
#+end_src

* Connecting the dot, and running all this
  :PROPERTIES:
  :ID:       d7319434-31e9-41b7-a9e4-19759edaaaeb
  :END:
#+source: runing-it
#+begin_src ruby
  def user_same(xi,field,value)
    UserInteract.new(SongListCollection.equal(xi,field,value),
                     "#{field}: #{value}")
  end

  def duplicate_same(xi,field,value)
    UserInteract.new(SongListDuplicate.equal(xi,field,value),
                     "Duplicate #{field}: #{value}")
  end

  def create_from_col(title, &body)
    dialog=Gtk::Dialog.new(title,
                           nil,
                           Gtk::Dialog::DESTROY_WITH_PARENT,
                           [Gtk::Stock::OK, Gtk::Dialog::RESPONSE_ACCEPT],
                           [Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_REJECT])
    dialog.vbox.add(Gtk::Label.new("collection pattern:"))
    entry=Gtk::Entry.new()
    dialog.vbox.add(entry)

    entry.signal_connect('activate') do |v|
      dialog.response(Gtk::Dialog::RESPONSE_ACCEPT)
    end

    dialog.show_all
    dialog.run do |response|
      if response == Gtk::Dialog::RESPONSE_ACCEPT
        begin
          body.call(entry.text)
        rescue Exception => e
          message = Gtk::MessageDialog.new(nil,
                                           Gtk::Dialog::DESTROY_WITH_PARENT,
                                           Gtk::MessageDialog::WARNING,
                                           Gtk::MessageDialog::BUTTONS_CLOSE,
                                           "Invalid pattern '%s'" % entry.text)
          message.run
          message.destroy
        end
      end
      dialog.destroy
    end
  end

  def user_parse(xi)
    create_from_col("Rate from search") do |pattern|
      UserInteract.new(SongListCollection.parse(xi,pattern),pattern)
    end
  end

  def duplicate_parse(xi)
    create_from_col("Look for duplicate") do |pattern|
      UserInteract.new(SongListDuplicate.parse(xi,pattern),pattern)
    end
  end

  user = UserInteract.new(SongListPlayed.new(XmmsInteract.new),"Xmms Rater", true)

  $0 = "xmms-gtk-rater"

  Gtk.main
#+end_src
